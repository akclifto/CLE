@using Microsoft.AspNetCore.Components.Web
@using WebTut.Website.Models
@using WebTut.Website.Services
@inject JsonFileProductService ProductService


<!--This div will run everytime.  -->
<div class="card-columns">
    @foreach (var product in ProductService.GetProducts())
    {
        <div class="card">
            <div class="card-img" style="background-image:url('@product.Image');">
                <div class=" card-body">
                    <h5 class=" card-title">
                        @product.Title
                    </h5>
                </div>
            </div>
        </div>
        <div class="card-footer">
            <small class="text-muted">
                <button @onclick="(e => SelectProduct(product.Id))"
                        data-toggle="modal" data-target="#productModal" class="btn btn-primary">
                    More Info
                </button>
            </small>
        </div>
    }
</div>

<!--This div will run as a pop up when we click the "More info" button, needs some cs for functionality -->
@if (selectProduct != null)
{
    <div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productTitle">@selectProduct.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="card">
                        <div class="card-img" style="background-image: url('@selectProduct.Image');">
                        </div>
                        <div class="card-body">
                            <p class="card-text">@selectProduct.Description</p>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    @if (voteCount == 0)
                    {
                        <span> Be the first to vote for this product!</span>
                    }
                    else
                    {
                        <span>@voteCount @voteLabel</span>
                    }

                    @for (int i = 1; i < 6; i++)
                    {
                        var currentStar = i;
                        if (i <= currentRating)
                        //using font-awesome for this from link
                        {
                            <span class="fa fa-star checked" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                        else
                        {
                            <span class="fa fa-star" @onclick="(e => SubmitRating(currentStar))"></span>
                        }
                    }

                </div>
            </div>
        </div>
    </div>
}
<!--add the stars for the ratins-->
<link rel="stylesheet" 
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">



@code {
    Product selectProduct;
    string selectedProductId; 

    //ctor
    void SelectProduct(string productId)
    {
        selectedProductId = productId;
        selectProduct = ProductService.GetProducts().First(x => x.Id == productId);
        GetCurrentRating();
    }

    /*Ratings related code*/
    int currentRating = 0;
    int voteCount = 0;
    string voteLabel;

    void GetCurrentRating()
    {
        if(selectProduct.Ratings == null)
        {
            currentRating = 0;
            voteCount = 0;
        }
        else
        {
            voteCount = selectProduct.Ratings.Count();
            voteLabel = voteCount > 1 ? "Votes" : "Vote";
            currentRating = selectProduct.Ratings.Sum() / voteCount;
        }

        //debug to check average
        System.Console.WriteLine($"Current rating for {selectProduct.Id} is: " +
            $"{currentRating}");
    }

    void SubmitRating (int rating)
    {
        System.Console.WriteLine($"Rating received for {selectProduct.Id} is: " +
            $"{rating}");

        ProductService.AddRating(selectedProductId, rating);
        //re-assert how the product looks on the UI
        SelectProduct(selectedProductId);
    }


}
